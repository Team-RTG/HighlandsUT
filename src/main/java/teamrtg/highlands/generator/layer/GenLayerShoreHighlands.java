package teamrtg.highlands.generator.layer;

import net.minecraft.init.Biomes;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.biome.BiomeJungle;
import net.minecraft.world.biome.BiomeMesa;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

import teamrtg.highlands.biome.HighlandsBiomes;
import teamrtg.highlands.util.BiomeUtils;

public class GenLayerShoreHighlands extends GenLayer {

    private static final String __OBFID = "CL_00000568";

    public GenLayerShoreHighlands(long p_i2130_1_, GenLayer p_i2130_3_) {

        super(p_i2130_1_);
        this.parent = p_i2130_3_;
    }

    /**
     * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
     * amounts, or biomeList[] indices based on the particular GenLayer subclass.
     */
    public int[] getInts(int areaX, int areaY, int areaWidth, int areaHeight) {

        int[] aint = this.parent.getInts(areaX - 1, areaY - 1, areaWidth + 2, areaHeight + 2);
        int[] aint1 = IntCache.getIntCache(areaWidth * areaHeight);

        for (int i1 = 0; i1 < areaHeight; ++i1) {
            for (int j1 = 0; j1 < areaWidth; ++j1) {
                this.initChunkSeed((long) (j1 + areaX), (long) (i1 + areaY));
                int k1 = aint[j1 + 1 + (i1 + 1) * (areaWidth + 2)];
                Biome biomegenbase = Biome.getBiome(k1);
                int l1;
                int i2;
                int j2;
                int k2;

                if (k1 == BiomeUtils.getId(Biomes.MUSHROOM_ISLAND)) {
                    l1 = aint[j1 + 1 + (i1 + 1 - 1) * (areaWidth + 2)];
                    i2 = aint[j1 + 1 + 1 + (i1 + 1) * (areaWidth + 2)];
                    j2 = aint[j1 + 1 - 1 + (i1 + 1) * (areaWidth + 2)];
                    k2 = aint[j1 + 1 + (i1 + 1 + 1) * (areaWidth + 2)];

                    if (l1 != BiomeUtils.getId(Biomes.OCEAN) && i2 != BiomeUtils.getId(Biomes.OCEAN) && j2 != BiomeUtils.getId(Biomes.OCEAN) && k2 != BiomeUtils.getId(Biomes.OCEAN)) {
                        aint1[j1 + i1 * areaWidth] = k1;
                    }
                    else {
                        aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(Biomes.MUSHROOM_ISLAND_SHORE);
                    }
                }
                else if (biomegenbase != null && biomegenbase.getBiomeClass() == BiomeJungle.class) {
                    l1 = aint[j1 + 1 + (i1 + 1 - 1) * (areaWidth + 2)];
                    i2 = aint[j1 + 1 + 1 + (i1 + 1) * (areaWidth + 2)];
                    j2 = aint[j1 + 1 - 1 + (i1 + 1) * (areaWidth + 2)];
                    k2 = aint[j1 + 1 + (i1 + 1 + 1) * (areaWidth + 2)];

                    if (this.isJungleOrOcean(l1) && this.isJungleOrOcean(i2) && this.isJungleOrOcean(j2) && this.isJungleOrOcean(k2)) {
                        if (!isBiomeOceanic(l1) && !isBiomeOceanic(i2) && !isBiomeOceanic(j2) && !isBiomeOceanic(k2)) {
                            aint1[j1 + i1 * areaWidth] = k1;
                        }
                        else {
                            aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(Biomes.BEACH);
                        }
                    }
                    else {
                        aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(Biomes.JUNGLE_EDGE);
                    }
                }
                else if (biomegenbase != null && HighlandsBiomes.foothillsBiomes.contains(biomegenbase)) {
                    l1 = aint[j1 + 1 + (i1 + 1 - 1) * (areaWidth + 2)];
                    i2 = aint[j1 + 1 + 1 + (i1 + 1) * (areaWidth + 2)];
                    j2 = aint[j1 + 1 - 1 + (i1 + 1) * (areaWidth + 2)];
                    k2 = aint[j1 + 1 + (i1 + 1 + 1) * (areaWidth + 2)];

                    if (this.isEdgeNotApplied(l1, k1) && this.isEdgeNotApplied(i2, k1) && this.isEdgeNotApplied(j2, k1) && this.isEdgeNotApplied(k2, k1)) {
                        if (!isBiomeOceanic(l1) && !isBiomeOceanic(i2) && !isBiomeOceanic(j2) && !isBiomeOceanic(k2)) {
                            aint1[j1 + i1 * areaWidth] = k1;
                        }
                        else {
                            aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(Biomes.BEACH);
                        }
                    }
                    else {
                        aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(biomegenbase) + 128;
                    }
                }
                else if (Biome.getBiome(k1).getBaseHeight() + Biome.getBiome(k1).getHeightVariation() < 1.3) {
                    if (biomegenbase != null && biomegenbase.isSnowyBiome()) {
                        this.func_151632_a(aint, aint1, j1, i1, areaWidth, k1, BiomeUtils.getId(Biomes.COLD_BEACH));
                    }
                    else if (k1 != BiomeUtils.getId(Biomes.MESA) && k1 != BiomeUtils.getId(Biomes.MESA_ROCK)) {
                        if (k1 != BiomeUtils.getId(Biomes.OCEAN) && k1 != BiomeUtils.getId(Biomes.DEEP_OCEAN) && k1 != BiomeUtils.getId(Biomes.RIVER) && k1 != BiomeUtils.getId(Biomes.SWAMPLAND)) {
                            l1 = aint[j1 + 1 + (i1 + 1 - 1) * (areaWidth + 2)];
                            i2 = aint[j1 + 1 + 1 + (i1 + 1) * (areaWidth + 2)];
                            j2 = aint[j1 + 1 - 1 + (i1 + 1) * (areaWidth + 2)];
                            k2 = aint[j1 + 1 + (i1 + 1 + 1) * (areaWidth + 2)];

                            if (!isBiomeOceanic(l1) && !isBiomeOceanic(i2) && !isBiomeOceanic(j2) && !isBiomeOceanic(k2)) {
                                aint1[j1 + i1 * areaWidth] = k1;
                            }
                            else {
                                aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(Biomes.BEACH);
                            }
                        }
                        else {
                            aint1[j1 + i1 * areaWidth] = k1;
                        }
                    }
                    else {
                        l1 = aint[j1 + 1 + (i1 + 1 - 1) * (areaWidth + 2)];
                        i2 = aint[j1 + 1 + 1 + (i1 + 1) * (areaWidth + 2)];
                        j2 = aint[j1 + 1 - 1 + (i1 + 1) * (areaWidth + 2)];
                        k2 = aint[j1 + 1 + (i1 + 1 + 1) * (areaWidth + 2)];

                        if (!isBiomeOceanic(l1) && !isBiomeOceanic(i2) && !isBiomeOceanic(j2) && !isBiomeOceanic(k2)) {
                            if (this.isMesa(l1) && this.isMesa(i2) && this.isMesa(j2) && this.isMesa(k2)) {
                                aint1[j1 + i1 * areaWidth] = k1;
                            }
                            else {
                                aint1[j1 + i1 * areaWidth] = BiomeUtils.getId(Biomes.DESERT);
                            }
                        }
                        else {
                            aint1[j1 + i1 * areaWidth] = k1;
                        }
                    }
                }
                else {
                    this.func_151632_a(aint, aint1, j1, i1, areaWidth, k1, BiomeUtils.getId(Biomes.STONE_BEACH));
                }
            }
        }

        return aint1;
    }

    private void func_151632_a(int[] p_151632_1_, int[] p_151632_2_, int p_151632_3_, int p_151632_4_, int p_151632_5_, int p_151632_6_, int p_151632_7_) {

        if (isBiomeOceanic(p_151632_6_)) {
            p_151632_2_[p_151632_3_ + p_151632_4_ * p_151632_5_] = p_151632_6_;
        }
        else {
            int j1 = p_151632_1_[p_151632_3_ + 1 + (p_151632_4_ + 1 - 1) * (p_151632_5_ + 2)];
            int k1 = p_151632_1_[p_151632_3_ + 1 + 1 + (p_151632_4_ + 1) * (p_151632_5_ + 2)];
            int l1 = p_151632_1_[p_151632_3_ + 1 - 1 + (p_151632_4_ + 1) * (p_151632_5_ + 2)];
            int i2 = p_151632_1_[p_151632_3_ + 1 + (p_151632_4_ + 1 + 1) * (p_151632_5_ + 2)];

            if (!isBiomeOceanic(j1) && !isBiomeOceanic(k1) && !isBiomeOceanic(l1) && !isBiomeOceanic(i2)) {
                p_151632_2_[p_151632_3_ + p_151632_4_ * p_151632_5_] = p_151632_6_;
            }
            else {
                p_151632_2_[p_151632_3_ + p_151632_4_ * p_151632_5_] = p_151632_7_;
            }
        }
    }

    private boolean isJungleOrOcean(int id1) {

        return Biome.getBiome(id1) != null && Biome.getBiome(id1).getBiomeClass() == BiomeJungle.class ? true : id1 == BiomeUtils.getId(Biomes.JUNGLE_EDGE) || id1 == BiomeUtils.getId(Biomes.JUNGLE) || id1 == BiomeUtils.getId(Biomes.JUNGLE_HILLS) || id1 == BiomeUtils.getId(Biomes.FOREST) || id1 == BiomeUtils.getId(Biomes.TAIGA) || isBiomeOceanic(id1);
    }

    private boolean isEdgeNotApplied(int id1, int target) {

        return id1 == target;
    }

    private boolean isMesa(int p_151633_1_) {

        return Biome.getBiome(p_151633_1_) instanceof BiomeMesa;
    }
}